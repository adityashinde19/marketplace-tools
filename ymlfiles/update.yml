name: Update Azure Container App Credentials

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Name of the Azure Container App to update'
        required: true
      unique_id:
        description: 'Unique identifier for tracking'
        required: true
      config_type:
        description: 'Type of configuration'
        required: true
      key_name:
        description: 'Name of the key to update'
        required: true
      key_value:
        description: 'Value to set'
        required: true
      is_secret:
        description: 'Whether this is a secret value'
        required: true

jobs:
  update-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Initialize Result JSON
        run: |
          mkdir -p output
          cat > output/result_${{ inputs.unique_id }}.json << 'EOF'
          {
            "run_id": "${{ github.run_id }}",
            "status": "running",
            "deployment_id": "${{ inputs.deployment_id }}",
            "unique_id": "${{ inputs.unique_id }}",
            "operation": "update_environment",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "updated_at": null,
            "updated_key": "${{ inputs.key_name }}",
            "error": null,
            "message": "Starting container app configuration update process"
          }
          EOF

      - name: Update Environment Variable Directly
        run: |
          set +e
          APP_NAME="${{ inputs.deployment_id }}"
          RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}"
          KEY_NAME="${{ inputs.key_name }}"
          KEY_VALUE="${{ inputs.key_value }}"
          UNIQUE_ID="${{ inputs.unique_id }}"

          echo "::add-mask::$KEY_VALUE"
          echo "Updating env var: $KEY_NAME with plain value."

          UPDATE_CMD="az containerapp update --name $APP_NAME --resource-group $RESOURCE_GROUP --set-env-vars $KEY_NAME=\"$KEY_VALUE\""
          echo "Executing: $UPDATE_CMD"
          update_output=$(eval "$UPDATE_CMD" 2>&1)
          EXIT_CODE=$?

          if [ $EXIT_CODE -eq 0 ]; then
            cat > output/result_$UNIQUE_ID.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "success",
            "deployment_id": "$APP_NAME",
            "unique_id": "$UNIQUE_ID",
            "operation": "update_environment",
            "resource_group": "$RESOURCE_GROUP",
            "updated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "updated_key": "$KEY_NAME",
            "error": null,
            "message": "Container app updated successfully"
          }
          EOF
          else
            cat > output/result_$UNIQUE_ID.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "failed",
            "deployment_id": "$APP_NAME",
            "unique_id": "$UNIQUE_ID",
            "operation": "update_environment",
            "resource_group": "$RESOURCE_GROUP",
            "updated_at": null,
            "updated_key": "$KEY_NAME",
            "error": "Update failed",
            "message": "Output: $update_output"
          }
          EOF
          fi

      - name: Display Results
        if: always()
        run: |
          echo "=== Update Result ==="
          cat output/result_${{ inputs.unique_id }}.json | jq .

      - name: Upload result artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "result_${{ inputs.unique_id }}"
          path: "output/result_${{ inputs.unique_id }}.json"
