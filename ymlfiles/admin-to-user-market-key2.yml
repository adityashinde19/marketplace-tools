name: Deploy Tool to Azure Container Apps

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: "Deployment ID (unique container/image name, e.g. toolid_userid_xxx)"
        required: true
      unique_id:
        description: "Unique identifier for tracking this workflow run"
        required: true
      tool_dir:
        description: "Path to tool directory (e.g. tools_studio/tool-id)"
        required: true
      credentials:
        description: "JSON string of credentials to pass to container"
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DEPLOYMENT_ID: ${{ github.event.inputs.deployment_id }}
      UNIQUE_ID: ${{ github.event.inputs.unique_id }}
      TOOL_DIR: ${{ github.event.inputs.tool_dir }}
      CREDENTIALS_JSON: ${{ github.event.inputs.credentials }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize Result JSON
        run: |
          mkdir -p output
          cat > output/result_${{ env.UNIQUE_ID }}.json << 'EOF'
          {
            "run_id": "${{ github.run_id }}",
            "status": "running",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "unique_id": "${{ env.UNIQUE_ID }}",
            "tool_dir": "${{ env.TOOL_DIR }}",
            "operation": "deploy",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "completed_at": null,
            "endpoint": null,
            "error": null,
            "message": "Starting deployment process"
          }
          EOF

      - name: Validate deployment ID format
        run: |
          if ! [[ "$DEPLOYMENT_ID" =~ ^[a-z0-9-]{1,32}$ ]]; then
            echo "::error::Invalid deployment_id format. Must be lowercase alphanumeric with hyphens, max 32 chars."
            
            cat > output/result_${{ env.UNIQUE_ID }}.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "failed",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "unique_id": "${{ env.UNIQUE_ID }}",
            "tool_dir": "${{ env.TOOL_DIR }}",
            "operation": "deploy",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "endpoint": null,
            "error": "Invalid deployment_id format",
            "message": "Invalid deployment_id format. Must be lowercase alphanumeric with hyphens, max 32 chars."
          }
          EOF
            exit 1
          fi

      - name: Verify tool directory exists
        run: |
          if [ ! -d "$TOOL_DIR" ]; then
            echo "::error::Tool directory '$TOOL_DIR' not found"
            
            cat > output/result_${{ env.UNIQUE_ID }}.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "failed",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "unique_id": "${{ env.UNIQUE_ID }}",
            "tool_dir": "${{ env.TOOL_DIR }}",
            "operation": "deploy",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "endpoint": null,
            "error": "Tool directory not found",
            "message": "Tool directory '$TOOL_DIR' not found"
          }
          EOF
            exit 1
          fi
          if [ ! -f "$TOOL_DIR/Dockerfile" ]; then
            echo "::error::Dockerfile not found in $TOOL_DIR"
            
            cat > output/result_${{ env.UNIQUE_ID }}.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "failed",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "unique_id": "${{ env.UNIQUE_ID }}",
            "tool_dir": "${{ env.TOOL_DIR }}",
            "operation": "deploy",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "endpoint": null,
            "error": "Dockerfile not found",
            "message": "Dockerfile not found in $TOOL_DIR"
          }
          EOF
            exit 1
          fi

      - name: Set deployment metadata
        id: metadata
        run: |
          echo "DEPLOYMENT_ID=${DEPLOYMENT_ID}" >> $GITHUB_ENV
          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
          echo "UNIQUE_ID=${UNIQUE_ID}" >> $GITHUB_ENV
          echo "unique_id=${UNIQUE_ID}" >> $GITHUB_OUTPUT
          echo "TOOL_DIR=${TOOL_DIR}" >> $GITHUB_ENV
          echo "tool_dir=${TOOL_DIR}" >> $GITHUB_OUTPUT

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate and parse credentials JSON
        id: validate-credentials
        run: |
          echo "Validating credentials JSON..."
          echo "$CREDENTIALS_JSON" > credentials.json
          if ! jq empty credentials.json; then
            echo "::error::Invalid JSON in credentials"
            
            cat > output/result_${{ env.UNIQUE_ID }}.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "failed",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "unique_id": "${{ env.UNIQUE_ID }}",
            "tool_dir": "${{ env.TOOL_DIR }}",
            "operation": "deploy",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "endpoint": null,
            "error": "Invalid credentials JSON",
            "message": "Invalid JSON in credentials"
          }
          EOF
            exit 1
          fi
          ENV_VARS=$(jq -r 'to_entries[] | "\(.key)=\(.value)"' credentials.json | paste -sd " " -)
          echo "ENV_VARS=${ENV_VARS}" >> $GITHUB_ENV

          # Update status to processing
          cat > output/result_${{ env.UNIQUE_ID }}.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "processing",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "unique_id": "${{ env.UNIQUE_ID }}",
            "tool_dir": "${{ env.TOOL_DIR }}",
            "operation": "deploy",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "completed_at": null,
            "endpoint": null,
            "error": null,
            "message": "Credentials validated successfully - proceeding with deployment"
          }
          EOF

      - name: Build and Push Docker Image
        run: |
          echo "Building Docker image from $TOOL_DIR..."
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/$DEPLOYMENT_ID:latest $TOOL_DIR
          echo ${{ secrets.AZURE_ACR_PASSWORD }} | docker login ${{ secrets.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/$DEPLOYMENT_ID:latest

          # Update status after image build
          cat > output/result_${{ env.UNIQUE_ID }}.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "processing",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "unique_id": "${{ env.UNIQUE_ID }}",
            "tool_dir": "${{ env.TOOL_DIR }}",
            "operation": "deploy",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "completed_at": null,
            "endpoint": null,
            "error": null,
            "message": "Docker image built and pushed successfully"
          }
          EOF

      - name: Deploy or Update Azure Container App
        id: deploy
        run: |
          set -e
          echo "Checking for existing container app..."
          EXISTING_APP=$(az containerapp show --name $DEPLOYMENT_ID --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query name -o tsv || echo "")

          if [ -z "$EXISTING_APP" ]; then
            echo "Creating new container app..."
            az containerapp create \
              --name $DEPLOYMENT_ID \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image ${{ secrets.AZURE_CONTAINER_REGISTRY }}/$DEPLOYMENT_ID:latest \
              --environment ${{ secrets.AZURE_CONTAINERAPPS_ENVIRONMENT }} \
              --ingress external --target-port 8000 \
              --registry-server ${{ secrets.AZURE_CONTAINER_REGISTRY }} \
              --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
              --registry-password ${{ secrets.AZURE_ACR_PASSWORD }} \
              --env-vars $ENV_VARS
          else
            echo "Updating existing container app..."
            az containerapp update \
              --name $DEPLOYMENT_ID \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image ${{ secrets.AZURE_CONTAINER_REGISTRY }}/$DEPLOYMENT_ID:latest \
              --set-env-vars $ENV_VARS
          fi

          echo "Retrieving application URL..."
          APP_URL=$(az containerapp show --name $DEPLOYMENT_ID --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn -o tsv)
          echo "DEPLOYED_URL=https://$APP_URL" >> $GITHUB_ENV
          echo "DEPLOYED_URL=https://$APP_URL" >> $GITHUB_OUTPUT

          # Final success status
          cat > output/result_${{ env.UNIQUE_ID }}.json << EOF
          {
            "run_id": "${{ github.run_id }}",
            "status": "success",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "unique_id": "${{ env.UNIQUE_ID }}",
            "tool_dir": "${{ env.TOOL_DIR }}",
            "operation": "deploy",
            "resource_group": "${{ secrets.AZURE_RESOURCE_GROUP }}",
            "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "endpoint": "https://$APP_URL",
            "error": null,
            "message": "Deployment completed successfully"
          }
          EOF

      - name: Display Results
        if: always()
        run: |
          echo "=== Deployment Result ==="
          if [ -f output/result_${{ env.UNIQUE_ID }}.json ]; then
            cat output/result_${{ env.UNIQUE_ID }}.json | jq . || cat output/result_${{ env.UNIQUE_ID }}.json
          fi

      - name: Upload result artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "result_${{ env.UNIQUE_ID }}"
          path: "output/result_${{ env.UNIQUE_ID }}.json"
